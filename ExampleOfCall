using EasyDAL;
using System;
using System.CodeDom;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Expression = System.Linq.Expressions.Expression;

namespace TsiExtentionsV40.Helpers.Internal
{
    internal class InternalDynamicSqlHelper<TEntity> : IDynamicSqlHelper<TEntity>, IOrderedDynamicSqlHelper<TEntity>, IFilteredDynamicSqlHelper<TEntity>
    {

        #region private members
        private readonly OrderByTranslator<TEntity> _orderByTranslator;
        private readonly StringBuilder _builder;
        private static IDictionary<string, string> _selectParts;
        private readonly StringBuilder _orderByBuilder;
        private readonly StringBuilder _WhereCondition;
        private List<SqlParameter> paramCollection;
        #endregion 

        #region Ctor

        public InternalDynamicSqlHelper()
        {
            _orderByTranslator = new OrderByTranslator<TEntity>();
            _builder = new StringBuilder();
            _orderByBuilder = new StringBuilder();
            _WhereCondition = new StringBuilder();

            // need to instantiate once in the life cycle of the application
            if (_selectParts == null)
            {
                _selectParts = new Dictionary<string, string>();
            }
        }

        #endregion


        #region IEnumerable<TEntity>
 
        public IEnumerable<TEntity> GetFromRawSql(string query, List<SqlParameter> parameters = null, string connectionString)
        {
            foreach (var reader in SqlHelper.ReadData(query, parameters, connectionString))
            {
                var resultObject = Activator.CreateInstance<TEntity>();

                for (var i = 0; i < reader.FieldCount; i++)
                {

                    if (reader[i] == DBNull.Value)
                    {
                        continue;
                    }

                    PropertyHelper.SetPropertyValue(resultObject, reader.GetName(i), reader[i]);
                }
                yield return resultObject;
            }
        }
 
    }
}
